import pandas as pd
import requests
import os
import tkinter as tk
from tkinter import messagebox
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Border, Side, Font
from datetime import datetime
import win32com.client as win32
import subprocess
import time

def fetch_jira_data():
    try:
        # Clear old dailycount.csv
        with open('dailycount.csv', 'w') as f:
            f.write('')

        url = 'https://your-jira-domain/rest/api/2/search?jql=filter=67888&maxResults=1000'
        headers = {
            "Authorization": "Bearer hjhhj",
            "Content-Type": "application/json"
        }

        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()

        # Extract project names
        projects = [issue['fields']['project']['name'] for issue in data['issues']]
        df = pd.DataFrame(projects, columns=['Project'])
        df_count = df['Project'].value_counts().reset_index()
        df_count.columns = ['Project', 'Count']
        df_count.to_csv('dailycount.csv', index=False)
        return True

    except Exception as e:
        messagebox.showerror("Jira Fetch Error", str(e))
        return False

def process_files():
    try:
        if not fetch_jira_data():
            return

        csv_file = 'dailycount.csv'
        excel_file = 'project.xlsx'
        image_file = os.path.abspath("count.png")

        df_csv = pd.read_csv(csv_file)
        df_excel = pd.read_excel(excel_file)

        today_str = datetime.today().strftime('%d-%B-%Y')
        df_excel[today_str] = df_excel['Project'].map(df_csv.set_index('Project')['Count']).fillna(0).astype(int)
        df_excel.to_excel(excel_file, index=False)

        wb = load_workbook(excel_file)
        ws = wb.active

        green_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
        yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
        center_align = Alignment(horizontal="center", vertical="center")
        thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                             top=Side(style='thin'), bottom=Side(style='thin'))

        header_font = Font(bold=True)

        for row in range(1, ws.max_row + 1):
            for col in range(1, ws.max_column + 1):
                cell = ws.cell(row=row, column=col)
                if row == 1:
                    cell.font = header_font
                    cell.fill = yellow_fill
                elif isinstance(cell.value, int) and cell.value == 0 and col >= 3:
                    cell.fill = green_fill
                cell.border = thin_border

        def merge_and_label(start_row, end_row, name):
            ws.merge_cells(start_row=start_row, start_column=1, end_row=end_row, end_column=1)
            cell = ws.cell(row=start_row, column=1)
            cell.value = name
            cell.fill = yellow_fill
            cell.alignment = center_align
            cell.border = thin_border
            for row in range(start_row, end_row + 1):
                ws.cell(row=row, column=1).border = thin_border

        merge_and_label(2, 12, "dan")
        merge_and_label(13, 22, "sim")
        merge_and_label(23, 32, "kim")

        wb.save(excel_file)

        # Screenshot Excel to PNG using COM automation
        excel = win32.gencache.EnsureDispatch('Excel.Application')
        wb_com = excel.Workbooks.Open(os.path.abspath(excel_file))
        ws_com = wb_com.Worksheets(1)

        used_range = ws_com.UsedRange
        used_range.CopyPicture(Format=win32.constants.xlBitmap)
        chart_obj = ws_com.ChartObjects().Add(10, 10, used_range.Width + 200, used_range.Height + 50)
        chart = chart_obj.Chart
        chart.Paste()
        chart.Export(Filename=image_file)
        chart_obj.Delete()
        wb_com.Close(SaveChanges=False)
        excel.Quit()

        time.sleep(1)
        subprocess.Popen(["mspaint.exe", image_file])

        messagebox.showinfo("Success", "Excel updated and 'count.png' opened in Paint!")

    except Exception as e:
        messagebox.showerror("Error", str(e))

# GUI
root = tk.Tk()
root.title("Project Count Updater")

frame = tk.Frame(root, padx=20, pady=20)
frame.pack()

label = tk.Label(frame, text="Click to fetch from Jira and update project.xlsx", font=('Arial', 12))
label.pack(pady=10)

button = tk.Button(frame, text="Run Script", command=process_files, font=('Arial', 12), bg="lightblue")
button.pack(pady=10)

root.mainloop()