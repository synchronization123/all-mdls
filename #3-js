const _mcrjirasummaryopen_tests_api = 'https://demo.defectdojo.org/api/v2/tests/?tags=mcr_jira&limit=10000';
const _mcrjirasummaryopen_users_api = 'https://demo.defectdojo.org/api/v2/users/';
const _mcrjirasummaryopen_dashboard_url = 'https://demo.defectdojo.org/dashboard';
const _mcrjirasummaryopen_environments = {
    CP: 10, // Environment ID for CP
    Develop: 9 // Environment ID for Develop
};
let _mcrjirasummaryopen_users = [];
let _mcrjirasummaryopen_csrf_token = '';

function _mcrjirasummaryopen_showLoadingModal() {
    document.getElementById('_mcrjirasummaryopen_loading_modal').style.display = 'flex';
}

function _mcrjirasummaryopen_hideLoadingModal() {
    document.getElementById('_mcrjirasummaryopen_loading_modal').style.display = 'none';
}

async function _mcrjirasummaryopen_fetchCsrfToken() {
    try {
        const response = await fetch(_mcrjirasummaryopen_dashboard_url);
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const tokenInput = doc.querySelector('input[name="csrfmiddlewaretoken"]');
        _mcrjirasummaryopen_csrf_token = tokenInput ? tokenInput.value : '';
        console.log('CSRF token fetched:', _mcrjirasummaryopen_csrf_token);
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching CSRF token', 'error');
        console.error('CSRF token fetch error:', error);
    }
}

async function _mcrjirasummaryopen_fetchUsers() {
    try {
        const response = await fetch(_mcrjirasummaryopen_users_api);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        const data = await response.json();
        _mcrjirasummaryopen_users = data.results.sort((a, b) => 
            `${a.first_name} ${a.last_name}`.localeCompare(`${b.first_name} ${b.last_name}`)
        );
        console.log('Users fetched:', _mcrjirasummaryopen_users.length, 'users');
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching users', 'error');
        console.error('Users fetch error:', error);
    }
}

function _mcrjirasummaryopen_getUserName(userId) {
    const parsedUserId = userId ? parseInt(userId) : null;
    const user = _mcrjirasummaryopen_users.find(u => u.id === parsedUserId);
    return user ? `${user.first_name} ${user.last_name}` : 'Unknown';
}

function _mcrjirasummaryopen_showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.classList.add('show'), 100);
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

async function _mcrjirasummaryopen_fetchTests() {
    try {
        _mcrjirasummaryopen_showLoadingModal();
        const response = await fetch(_mcrjirasummaryopen_tests_api);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        const data = await response.json();
        console.log('Raw tests data:', data);
        const tests = data.results.filter(test => ['Pending', 'On Hold'].includes(test.branch_tag));
        console.log('Filtered tests:', tests.length, 'tests with branch_tag Pending or On Hold');
        if (!tests.length) {
            document.getElementById('_mcrjirasummaryopen_no_data').style.display = 'block';
            _mcrjirasummaryopen_showToast('No tests found for Pending or On Hold', 'error');
            return;
        }
        await _mcrjirasummaryopen_fetchUsers();
        if (!_mcrjirasummaryopen_users.length) {
            _mcrjirasummaryopen_showToast('No users found; lead names may be incorrect', 'error');
        }
        await _mcrjirasummaryopen_renderSummary(tests);
        _mcrjirasummaryopen_showToast('Summary loaded successfully', 'success');
    } catch (error) {
        document.getElementById('_mcrjirasummaryopen_no_data').style.display = 'block';
        _mcrjirasummaryopen_showToast(`Error fetching tests: ${error.message}`, 'error');
        console.error('Tests fetch error:', error);
    } finally {
        _mcrjirasummaryopen_hideLoadingModal();
    }
}

async function _mcrjirasummaryopen_renderSummary(tests) {
    const container = document.getElementById('_mcrjirasummaryopen_card_container');
    const noDataMessage = document.getElementById('_mcrjirasummaryopen_no_data');
    container.innerHTML = '';
    noDataMessage.style.display = 'none';

    // Validate test data
    const invalidTests = tests.filter(test => !test.hasOwnProperty('lead') || !test.hasOwnProperty('branch_tag') || !test.hasOwnProperty('environment'));
    if (invalidTests.length) {
        console.warn('Invalid tests (missing lead, branch_tag, or environment):', invalidTests);
        _mcrjirasummaryopen_showToast(`${invalidTests.length} tests have missing fields`, 'error');
    }

    // Group tests by lead
    const summary = {};
    tests.forEach(test => {
        const leadId = test.lead || 'Unknown';
        if (!summary[leadId]) {
            summary[leadId] = {
                cp: { Pending: 0, OnHold: 0 },
                develop: { Pending: 0, OnHold: 0 }
            };
        }
        const branchTag = test.branch_tag === 'Pending' ? 'Pending' : 'OnHold';
        if (test.environment === _mcrjirasummaryopen_environments.CP) {
            summary[leadId].cp[branchTag]++;
        } else if (test.environment === _mcrjirasummaryopen_environments.Develop) {
            summary[leadId].develop[branchTag]++;
        }
    });
    console.log('Summary data:', summary);

    // Check if summary is empty
    if (!Object.keys(summary).length) {
        noDataMessage.style.display = 'block';
        _mcrjirasummaryopen_showToast('No data to display after processing', 'error');
        return;
    }

    // Calculate totals
    const totals = {
        cp: { Pending: 0, OnHold: 0 },
        develop: { Pending: 0, OnHold: 0 },
        total: 0
    };
    Object.values(summary).forEach(leadData => {
        totals.cp.Pending += leadData.cp.Pending;
        totals.cp.OnHold += leadData.cp.OnHold;
        totals.develop.Pending += leadData.develop.Pending;
        totals.develop.OnHold += leadData.develop.OnHold;
    });
    totals.total = totals.cp.Pending + totals.cp.OnHold + totals.develop.Pending + totals.develop.OnHold;
    console.log('Totals:', totals);

    // Render rows
    Object.keys(summary).sort((a, b) => {
        const nameA = _mcrjirasummaryopen_getUserName(a);
        const nameB = _mcrjirasummaryopen_getUserName(b);
        return nameA.localeCompare(nameB);
    }).forEach(leadId => {
        const data = summary[leadId];
        const total = data.cp.Pending + data.cp.OnHold + data.develop.Pending + data.develop.OnHold;
        const card = document.createElement('div');
        card.className = 'card';
        card.innerHTML = `
            <div>${_mcrjirasummaryopen_getUserName(leadId)}</div>
            <div class="sub-cell">
                <div>${data.cp.Pending}</div>
                <div>${data.cp.OnHold}</div>
            </div>
            <div class="sub-cell">
                <div>${data.develop.Pending}</div>
                <div>${data.develop.OnHold}</div>
            </div>
            <div class="total-cell">${total}</div>
        `;
        container.appendChild(card);
    });

    // Render total row
    const totalCard = document.createElement('div');
    totalCard.className = 'card total-row';
    totalCard.innerHTML = `
        <div>Total</div>
        <div class="sub-cell">
            <div class="total-cell">${totals.cp.Pending}</div>
            <div class="total-cell">${totals.cp.OnHold}</div>
        </div>
        <div class="sub-cell">
            <div class="total-cell">${totals.develop.Pending}</div>
            <div class="total-cell">${totals.develop.OnHold}</div>
        </div>
        <div class="total-cell">${totals.total}</div>
    `;
    container.appendChild(totalCard);
}

document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('mcr-jira-summary-open').classList.contains('active')) {
        _mcrjirasummaryopen_fetchCsrfToken().then(_mcrjirasummaryopen_fetchTests);
    }

    document.querySelector('.tab[data-tab="mcr-jira-summary-open"]').addEventListener('click', () => {
        _mcrjirasummaryopen_fetchCsrfToken().then(_mcrjirasummaryopen_fetchTests);
    });
});