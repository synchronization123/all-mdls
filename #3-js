const _mcrjirasummaryopen_tests_api = 'https://demo.defectdojo.org/api/v2/tests/?tags=mcr_jira&limit=10000';
const _mcrjirasummaryopen_users_api = 'https://demo.defectdojo.org/api/v2/users/';
const _mcrjirasummaryopen_environments_api = 'https://demo.defectdojo.org/api/v2/development_environments/';
const _mcrjirasummaryopen_engagements_api = 'https://demo.defectdojo.org/api/v2/engagements/';
let _mcrjirasummaryopen_tests = [];
let _mcrjirasummaryopen_users = [];
let _mcrjirasummaryopen_environments = {};
let _mcrjirasummaryopen_engagements = [];

function _mcrjirasummaryopen_showLoadingModal() {
    const modal = document.getElementById('_mcrjirasummaryopen_loading_modal');
    if (modal) modal.style.display = 'flex';
}

function _mcrjirasummaryopen_hideLoadingModal() {
    const modal = document.getElementById('_mcrjirasummaryopen_loading_modal');
    if (modal) modal.style.display = 'none';
}

async function _mcrjirasummaryopen_fetchUsers() {
    try {
        const response = await fetch(_mcrjirasummaryopen_users_api);
        const data = await response.json();
        _mcrjirasummaryopen_users = data.results.sort((a, b) => 
            `${a.first_name} ${a.last_name}`.localeCompare(`${b.first_name} ${b.last_name}`)
        );
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching users', 'error');
    }
}

async function _mcrjirasummaryopen_fetchEngagements() {
    try {
        const response = await fetch(_mcrjirasummaryopen_engagements_api);
        const data = await response.json();
        _mcrjirasummaryopen_engagements = data.results.filter(engagement => engagement.active);
        const engagementSelect = document.getElementById('_mcrjirasummaryopen_engagement_filter');
        if (engagementSelect) {
            engagementSelect.innerHTML = '<option value="">All Engagements</option>';
            _mcrjirasummaryopen_engagements.forEach(engagement => {
                const option = document.createElement('option');
                option.value = engagement.id;
                option.textContent = engagement.name || `Engagement ${engagement.id}`;
                engagementSelect.appendChild(option);
            });
            engagementSelect.addEventListener('change', async () => {
                const engagementId = engagementSelect.value;
                if (engagementId) {
                    await _mcrjirasummaryopen_fetchTestsForEngagement(engagementId);
                } else {
                    await _mcrjirasummaryopen_fetchTests();
                }
            });
        }
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching engagements', 'error');
    }
}

async function _mcrjirasummaryopen_fetchEnvironmentName(envId) {
    if (!envId) return 'N/A';
    if (_mcrjirasummaryopen_environments[envId]) {
        return _mcrjirasummaryopen_environments[envId];
    }
    try {
        const response = await fetch(`${_mcrjirasummaryopen_environments_api}${envId}/`);
        const data = await response.json();
        _mcrjirasummaryopen_environments[envId] = data.name || 'Unknown';
        return _mcrjirasummaryopen_environments[envId];
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching environment name', 'error');
        return 'Unknown';
    }
}

function _mcrjirasummaryopen_showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.classList.add('show'), 100);
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

async function _mcrjirasummaryopen_fetchTests() {
    try {
        _mcrjirasummaryopen_showLoadingModal();
        const response = await fetch(_mcrjirasummaryopen_tests_api);
        const data = await response.json();
        _mcrjirasummaryopen_tests = data.results.filter(test => 
            ['Pending', 'On Hold'].includes(test.branch_tag) && 
            [9, 10, 11].includes(test.environment)
        );

        await _mcrjirasummaryopen_fetchUsers();
        await _mcrjirasummaryopen_fetchEngagements();
        await _mcrjirasummaryopen_updateEnvironmentHeaders();
        await _mcrjirasummaryopen_renderTable();
        _mcrjirasummaryopen_showToast('Summary loaded successfully', 'success');
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching tests', 'error');
    } finally {
        _mcrjirasummaryopen_hideLoadingModal();
    }
}

async function _mcrjirasummaryopen_fetchTestsForEngagement(engagementId) {
    try {
        _mcrjirasummaryopen_showLoadingModal();
        const response = await fetch(`${_mcrjirasummaryopen_tests_api}&engagement=${engagementId}`);
        const data = await response.json();
        _mcrjirasummaryopen_tests = data.results.filter(test => 
            ['Pending', 'On Hold'].includes(test.branch_tag) && 
            [9, 10, 11].includes(test.environment)
        );

        await _mcrjirasummaryopen_fetchUsers();
        await _mcrjirasummaryopen_updateEnvironmentHeaders();
        await _mcrjirasummaryopen_renderTable();
        _mcrjirasummaryopen_showToast(`Summary loaded for Engagement ${engagementId}`, 'success');
    } catch (error) {
        _mcrjirasummaryopen_showToast('Error fetching tests for engagement', 'error');
    } finally {
        _mcrjirasummaryopen_hideLoadingModal();
    }
}

async function _mcrjirasummaryopen_refreshData() {
    _mcrjirasummaryopen_tests = []; // Clear existing data
    const engagementId = document.getElementById('_mcrjirasummaryopen_engagement_filter')?.value;
    if (engagementId) {
        await _mcrjirasummaryopen_fetchTestsForEngagement(engagementId);
    } else {
        await _mcrjirasummaryopen_fetchTests();
    }
    _mcrjirasummaryopen_showToast('Data refreshed', 'success');
}

async function _mcrjirasummaryopen_updateEnvironmentHeaders() {
    const envIds = [9, 10, 11];
    for (const envId of envIds) {
        const name = await _mcrjirasummaryopen_fetchEnvironmentName(envId);
        const header = document.getElementById(`_mcrjirasummaryopen_env_${envId}_name`);
        if (header) {
            header.textContent = name;
        }
    }
}

async function _mcrjirasummaryopen_renderTable() {
    const container = document.getElementById('_mcrjirasummaryopen_card_container');
    if (!container) return;

    container.innerHTML = '';

    // Aggregate counts by lead, environment, and branch_tag
    const summary = {};
    const totals = {
        env9_pending: 0,
        env9_onhold: 0,
        env10_pending: 0,
        env10_onhold: 0,
        env11_pending: 0,
        env11_onhold: 0,
        total: 0
    };

    _mcrjirasummaryopen_tests.forEach(test => {
        const leadId = test.lead || 'unassigned';
        if (!summary[leadId]) {
            summary[leadId] = {
                env9_pending: 0,
                env9_onhold: 0,
                env10_pending: 0,
                env10_onhold: 0,
                env11_pending: 0,
                env11_onhold: 0
            };
        }

        if (test.environment === 9) {
            if (test.branch_tag === 'Pending') {
                summary[leadId].env9_pending++;
                totals.env9_pending++;
            } else if (test.branch_tag === 'On Hold') {
                summary[leadId].env9_onhold++;
                totals.env9_onhold++;
            }
        } else if (test.environment === 10) {
            if (test.branch_tag === 'Pending') {
                summary[leadId].env10_pending++;
                totals.env10_pending++;
            } else if (test.branch_tag === 'On Hold') {
                summary[leadId].env10_onhold++;
                totals.env10_onhold++;
            }
        } else if (test.environment === 11) {
            if (test.branch_tag === 'Pending') {
                summary[leadId].env11_pending++;
                totals.env11_pending++;
            } else if (test.branch_tag === 'On Hold') {
                summary[leadId].env11_onhold++;
                totals.env11_onhold++;
            }
        }
    });

    // Calculate totals
    Object.values(summary).forEach(leadData => {
        leadData.total = (
            leadData.env9_pending + leadData.env9_onhold +
            leadData.env10_pending + leadData.env10_onhold +
            leadData.env11_pending + leadData.env11_onhold
        );
    });
    totals.total = (
        totals.env9_pending + totals.env9_onhold +
        totals.env10_pending + totals.env10_onhold +
        totals.env11_pending + totals.env11_onhold
    );

    // Render rows for each lead
    const sortedLeadIds = Object.keys(summary).sort((a, b) => {
        const nameA = a === 'unassigned' ? 'Unassigned' : _mcrjirasummaryopen_getUserName(a);
        const nameB = b === 'unassigned' ? 'Unassigned' : _mcrjirasummaryopen_getUserName(b);
        return nameA.localeCompare(nameB);
    });

    sortedLeadIds.forEach(leadId => {
        const data = summary[leadId];
        const card = document.createElement('div');
        card.className = 'card';
        card.innerHTML = `
            <div>${leadId === 'unassigned' ? 'Unassigned' : _mcrjirasummaryopen_getUserName(leadId)}</div>
            <div>${data.env9_pending}</div>
            <div>${data.env9_onhold}</div>
            <div>${data.env10_pending}</div>
            <div>${data.env10_onhold}</div>
            <div>${data.env11_pending}</div>
            <div>${data.env11_onhold}</div>
            <div class="total-column">${data.total}</div>
        `;
        container.appendChild(card);
    });

    // Render total row
    const totalRow = document.createElement('div');
    totalRow.className = 'card total-row';
    totalRow.innerHTML = `
        <div>Total</div>
        <div>${totals.env9_pending}</div>
        <div>${totals.env9_onhold}</div>
        <div>${totals.env10_pending}</div>
        <div>${totals.env10_onhold}</div>
        <div>${totals.env11_pending}</div>
        <div>${totals.env11_onhold}</div>
        <div class="total-column">${totals.total}</div>
    `;
    container.appendChild(totalRow);
}

function _mcrjirasummaryopen_getUserName(userId) {
    if (userId === 'unassigned') return 'Unassigned';
    const user = _mcrjirasummaryopen_users.find(u => u.id === parseInt(userId));
    return user ? `${user.first_name} ${user.last_name}` : 'Unknown';
}

document.addEventListener('DOMContentLoaded', () => {
    const tab = document.getElementById('mcr-jira-summary-open');
    if (tab && tab.classList.contains('active')) {
        _mcrjirasummaryopen_fetchTests();
    }

    document.querySelector('.tab[data-tab="mcr-jira-summary-open"]')?.addEventListener('click', () => {
        const tabContent = document.getElementById('mcr-jira-summary-open');
        if (tabContent && !_mcrjirasummaryopen_tests.length) {
            _mcrjirasummaryopen_fetchTests();
        }
    });
});