async function updateTestFromJiraInput(engagementId, input) {
    const field = input.dataset.field;
    const value = input.value;
    const tests = await fetchTests(engagementId);
    const today = new Date().toISOString().split("T")[0];
    
    let test = tests[0];
    if (!test) {
        // Create a new test if none exist
        const newTestPayload = {
            engagement: engagementId,
            title: `Jira Bifurcation for Engagement ${engagementId}`,
            tags: ["patch_jira_count"],
            test_type_name: "Patch Validation",
            scan_type: "Patch Validation",
            target_start: today,
            target_end: today,
            lead: 2,
            test_type: 202,
            environment: 7,
            [field]: value
        };
        try {
            const response = await fetch(`${BASE_URL}/tests/`, {
                method: "POST",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(newTestPayload),
                credentials: "include"
            });
            if (!response.ok) showAlert("Failed to create test!", "danger");
            fetchEngagements();
        } catch (error) {
            console.error("Error creating test:", error);
            showAlert("Error creating test!", "danger");
        }
    } else {
        // Fetch existing test details first
        let existingTest;
        try {
            const response = await fetch(`${BASE_URL}/tests/${test.id}/`, {
                method: "GET",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                credentials: "include"
            });
            if (!response.ok) throw new Error("Failed to fetch test");
            existingTest = await response.json();
        } catch (error) {
            console.error("Error fetching test:", error);
            showAlert("Error fetching test!", "danger");
            return;
        }

        // Update existing test with mandatory fields
        const payload = {
            ...existingTest,
            test_type_name: "Patch Validation",
            scan_type: "Patch Validation",
            title: existingTest.title, // Keep current title
            target_start: today,
            target_end: today,
            lead: 2,
            test_type: 202,
            environment: 7,
            [field]: value
        };
        try {
            const response = await fetch(`${BASE_URL}/tests/${test.id}/`, {
                method: "PUT",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(payload),
                credentials: "include"
            });
            if (!response.ok) {
                const errorData = await response.json();
                console.error("Error details:", errorData);
                showAlert("Failed to update test!", "danger");
            } else {
                fetchEngagements();
            }
        } catch (error) {
            console.error("Error updating test:", error);
            showAlert("Error updating test!", "danger");
        }
    }
}