// Modified fetchTests function (unchanged, included for reference)
async function fetchTests(engagementId) {
    try {
        const response = await fetch(`${BASE_URL}/tests/?engagement=${engagementId}&tags=patch_jira_count&limit=1000000`);
        const data = await response.json();
        testsList = data.results || [];
    } catch (error) {
        console.error("Error fetching tests:", error);
        return [];
    }
    return testsList;
}

// Modified getJiraBifurcation function
async function getJiraBifurcation(engagementId) {
    const tests = await fetchTests(engagementId);
    const changelogCount = tests.filter(t => t.version).length;
    const doableCount = tests.filter(t => t.build_id).length;
    const securityCount = tests.filter(t => t.commit_hash).length;
    const functionalCount = tests.filter(t => t.branch_tag).length;
    return { changelogCount, doableCount, securityCount, functionalCount };
}

// Modified renderTableOpen function
async function renderTableOpen(page) {
    const tableBody = document.getElementById("openTasksTable");
    tableBody.innerHTML = "";
    const start = (page - 1) * ROWS_PER_PAGE;
    const end = start + ROWS_PER_PAGE;
    const paginatedTasks = openTasks.slice(start, end);

    for (const t of paginatedTasks) {
        const jiraBifurcation = await getJiraBifurcation(t.id);
        const row = document.createElement("tr");
        row.dataset.id = t.id;
        row.innerHTML = `
            <td>${t.id}</td>
            <td>${t.created.split("T")[0]}</td>
            <td>${calculateAgingOpen(t.created)}</td>
            <td>${t.name}</td>
            <td><input type="number" class="jira-bifurcation-input" value="${jiraBifurcation.changelogCount}" max="9999" min="0" data-field="version" data-engagement-id="${t.id}"></td>
            <td><input type="number" class="jira-bifurcation-input" value="${jiraBifurcation.doableCount}" max="9999" min="0" data-field="build_id" data-engagement-id="${t.id}"></td>
            <td><input type="number" class="jira-bifurcation-input" value="${jiraBifurcation.securityCount}" max="9999" min="0" data-field="commit_hash" data-engagement-id="${t.id}"></td>
            <td><input type="number" class="jira-bifurcation-input" value="${jiraBifurcation.functionalCount}" max="9999" min="0" data-field="branch_tag" data-engagement-id="${t.id}"></td>
            <td>${createAssignedToDropdown(t.lead)}</td>
            <td>${createStatusDropdown(t.status)}</td>
            <td>${createStatusDropdown(t.branch_tag || 'Not Started')}</td>
            <td>${createStatusDropdown(t.commit_hash || 'Not Started')}</td>
            <td>${t.target_start?.split("T")[0] || 'N/A'}</td>
            <td>${t.target_end?.split("T")[0] || 'N/A'}</td>
            <td>${t.build_id || 'N/A'}</td>
            <td>${t.reason || 'N/A'}</td>
            <td>${createProductDropdown(t.product)}</td>
            <td>${t.version || 'N/A'}</td>
            <td>
                <button class="btn btn-danger btn-sm" onclick="closeTask(${t.id}, '${t.name}')">Close</button>
                <button class="btn btn-primary btn-sm" onclick="showEditModal(${t.id})">Edit</button>
            </td>
        `;
        tableBody.appendChild(row);

        const statusAnalyst = row.querySelector("td:nth-child(10) select");
        const statusMentor = row.querySelector("td:nth-child(11) select");
        const statusLead = row.querySelector("td:nth-child(12) select");
        const assignedTo = row.querySelector("td:nth-child(9) select");
        const product = row.querySelector("td:nth-child(17) select");
        const jiraInputs = row.querySelectorAll(".jira-bifurcation-input");

        [statusAnalyst, statusMentor, statusLead, assignedTo, product].forEach(el => {
            el.addEventListener("change", () => updateTask(t.id, t.name));
            el.addEventListener("blur", () => showAlert("Saved", "success"));
        });

        jiraInputs.forEach(input => {
            input.addEventListener("change", () => updateTestFromJiraInput(t.id, input));
            input.addEventListener("blur", () => showAlert("Saved", "success"));
        });
    }
    renderPagination('open');
}

// New function to update tests from Jira Bifurcation inputs
async function updateTestFromJiraInput(engagementId, input) {
    const field = input.dataset.field;
    const value = input.value;
    const tests = await fetchTests(engagementId);
    
    // For simplicity, we'll update the first test or create a new one if none exist
    let test = tests[0];
    if (!test) {
        // Create a new test if none exist
        const newTestPayload = {
            engagement: engagementId,
            title: `Jira Bifurcation for Engagement ${engagementId}`,
            tags: ["patch_jira_count"],
            target_start: new Date().toISOString().split("T")[0],
            target_end: new Date().toISOString().split("T")[0],
            [field]: value
        };
        try {
            const response = await fetch(`${BASE_URL}/tests/`, {
                method: "POST",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(newTestPayload),
                credentials: "include"
            });
            if (!response.ok) showAlert("Failed to create test!", "danger");
            fetchEngagements();
        } catch (error) {
            console.error("Error creating test:", error);
            showAlert("Error creating test!", "danger");
        }
    } else {
        // Update existing test
        const payload = {
            ...test,
            [field]: value
        };
        try {
            const response = await fetch(`${BASE_URL}/tests/${test.id}/`, {
                method: "PUT",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(payload),
                credentials: "include"
            });
            if (!response.ok) showAlert("Failed to update test!", "danger");
            fetchEngagements();
        } catch (error) {
            console.error("Error updating test:", error);
            showAlert("Error updating test!", "danger");
        }
    }
}

// Modified updateTask function (to exclude Jira Bifurcation fields)
async function updateTask(id, name) {
    const row = document.querySelector(`#${activeTab}TasksTable tr[data-id="${id}"]`);
    if (!row) return;
    const statusAnalyst = row.querySelector("td:nth-child(10) select").value;
    const statusMentor = row.querySelector("td:nth-child(11) select").value;
    const statusLead = row.querySelector("td:nth-child(12) select").value;
    const assignedTo = row.querySelector("td:nth-child(9) select").value;
    const product = row.querySelector("td:nth-child(17) select").value;

    const task = allTasks.find(t => t.id === id);
    const payload = {
        ...task,
        status: statusAnalyst,
        branch_tag: statusMentor,
        commit_hash: statusLead,
        lead: assignedTo,
        product: product,
    };

    try {
        const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
            method: "PUT",
            headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
            body: JSON.stringify(payload),
            credentials: "include"
        });
        if (!response.ok) showAlert("Failed to update task!", "danger");
        fetchEngagements();
    } catch (error) {
        console.error("Error updating task:", error);
        showAlert("Error updating task!", "danger");
    }
}