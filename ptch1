<script>
    const BASE_URL = "https://demo.defectdojo.org/api/v2";
    let csrfToken = '';
    let usersList = [];
    let productsList = [];
    let testsList = [];
    const ROWS_PER_PAGE = 5;
    let currentPageOpen = 1;
    let currentPageClosed = 1;
    let currentPageTests = 1;
    let openTasks = [];
    let closedTasks = [];
    let allTasks = [];
    let activeTab = 'open';
    let modalStack = [];
    let currentEngagementId = null;

    async function fetchCSRF() {
        try {
            const response = await fetch("https://demo.defectdojo.org/api/key-v2", { credentials: "include" });
            const text = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, "text/html");
            const csrfInput = doc.querySelector("input[name='csrfmiddlewaretoken']");
            if (csrfInput) {
                csrfToken = csrfInput.value;
                document.getElementById("csrfToken").innerText = csrfToken;
            }
        } catch (error) {
            console.error("Error fetching CSRF Token:", error);
        }
    }

    async function fetchUsers() {
        try {
            const response = await fetch(`${BASE_URL}/users/`);
            const data = await response.json();
            usersList = data.results || [];
        } catch (error) {
            console.error("Error fetching users:", error);
        }
    }

    async function fetchProducts() {
        try {
            const response = await fetch(`${BASE_URL}/products/?limit=1000000`);
            const data = await response.json();
            productsList = data.results || [];
        } catch (error) {
            console.error("Error fetching products:", error);
        }
    }

    async function fetchTests(engagementId) {
        try {
            const response = await fetch(`${BASE_URL}/tests/?engagement=${engagementId}&tags=patch_jira&limit=1000000`);
            const data = await response.json();
            testsList = data.results || [];
        } catch (error) {
            console.error("Error fetching tests:", error);
            return [];
        }
        return testsList;
    }

    function showAlert(message, type) {
        const alertBox = document.getElementById("alertBox");
        alertBox.className = `alert alert-${type}`;
        alertBox.innerHTML = message;
        alertBox.style.display = "block";
        setTimeout(() => { alertBox.style.display = "none"; }, 3000);
    }

    function switchTab(tab) {
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));
        document.querySelector(`.tab[onclick="switchTab('${tab}')"]`).classList.add('active');
        document.getElementById(`${tab}-tab`).classList.add('active');
        activeTab = tab;
        if (tab === 'open') renderTableOpen(currentPageOpen);
        else renderTableClosed(currentPageClosed);
        updateTotalCount();
    }

    function updateTotalCount() {
        const count = activeTab === 'open' ? openTasks.length : closedTasks.length;
        document.getElementById("totalCount").textContent = `Total Tasks: ${count}`;
    }

    function populateFilters() {
        const assignedToOpen = document.getElementById("assignedToFilterOpen");
        const assignedToClosed = document.getElementById("assignedToFilterClosed");
        const openLeads = [...new Set(openTasks.map(t => t.lead))].map(id => {
            const user = usersList.find(u => u.id == id);
            return { id, name: user ? `${user.first_name} ${user.last_name}` : 'Unassigned' };
        });
        const closedLeads = [...new Set(closedTasks.map(t => t.lead))].map(id => {
            const user = usersList.find(u => u.id == id);
            return { id, name: user ? `${user.first_name} ${user.last_name}` : 'Unassigned' };
        });
        assignedToOpen.innerHTML = '<option value="">Filter by Assigned To</option>' + 
            openLeads.map(l => `<option value="${l.id}">${l.name}</option>`).join('');
        assignedToClosed.innerHTML = '<option value="">Filter by Assigned To</option>' + 
            closedLeads.map(l => `<option value="${l.id}">${l.name}</option>`).join('');
    }

    function clearFilters(tab) {
        if (tab === 'open') {
            document.getElementById("assignedToFilterOpen").value = "";
            document.getElementById("nameSearchOpen").value = "";
            document.getElementById("createdFilterOpen").value = "";
        } else {
            document.getElementById("assignedToFilterClosed").value = "";
            document.getElementById("nameSearchClosed").value = "";
            document.getElementById("createdFilterClosed").value = "";
        }
        fetchEngagements();
    }

    async function fetchEngagements() {
        try {
            const response = await fetch(`${BASE_URL}/engagements/?tags=pci&limit=1000000`);
            const data = await response.json();
            allTasks = data.results || [];

            const assignedToOpen = document.getElementById("assignedToFilterOpen").value;
            const nameSearchOpen = document.getElementById("nameSearchOpen").value.toLowerCase().trim();
            const createdOpen = document.getElementById("createdFilterOpen").value;

            const assignedToClosed = document.getElementById("assignedToFilterClosed").value;
            const nameSearchClosed = document.getElementById("nameSearchClosed").value.toLowerCase().trim();
            const createdClosed = document.getElementById("createdFilterClosed").value;

            openTasks = allTasks.filter(t => t.active).filter(t => {
                const name = t.name.toLowerCase();
                const createdDate = t.created.split("T")[0];
                return (!assignedToOpen || t.lead == assignedToOpen) &&
                       (!nameSearchOpen || name.includes(nameSearchOpen)) &&
                       (!createdOpen || createdDate === createdOpen);
            });

            closedTasks = allTasks.filter(t => !t.active).filter(t => {
                const name = t.name.toLowerCase();
                const createdDate = t.created.split("T")[0];
                return (!assignedToClosed || t.lead == assignedToClosed) &&
                       (!nameSearchClosed || name.includes(nameSearchClosed)) &&
                       (!createdClosed || createdDate === createdClosed);
            });

            currentPageOpen = 1;
            currentPageClosed = 1;
            renderTableOpen(currentPageOpen);
            renderTableClosed(currentPageClosed);
            updateTotalCount();
            populateFilters();
        } catch (error) {
            console.error("Error fetching tasks:", error);
            showAlert("Error fetching tasks!", "danger");
        }
    }

    function calculateAgingOpen(created) {
        const today = new Date();
        const createdDate = new Date(created.split("T")[0]);
        const diffTime = today - createdDate;
        return Math.floor(diffTime / (1000 * 60 * 60 * 24));
    }

    function calculateAgingClosed(created, updated) {
        const createdDate = new Date(created.split("T")[0]);
        const updatedDate = updated ? new Date(updated.split("T")[0]) : createdDate;
        const diffTime = updatedDate - createdDate;
        return Math.floor(diffTime / (1000 * 60 * 60 * 24));
    }

    function getProductName(productId) {
        const product = productsList.find(p => p.id === productId);
        return product ? product.name : 'Unknown';
    }

    function getAssignedToName(leadId) {
        const user = usersList.find(u => u.id == leadId);
        return user ? `${user.first_name} ${user.last_name}` : 'Unassigned';
    }

    function createStatusDropdown(selectedValue) {
        const options = ["Not Started", "In Progress", "On Hold", "Completed"];
        return `<select class="form-select">${options.map(o => `<option value="${o}" ${o === selectedValue ? "selected" : ""}>${o}</option>`).join('')}</select>`;
    }

    function createProductDropdown(selectedId) {
        return `<select class="form-select">${productsList.map(p => `<option value="${p.id}" ${p.id === selectedId ? "selected" : ""}>${p.name}</option>`).join('')}</select>`;
    }

    function createAssignedToDropdown(selectedId) {
        return `<select class="form-select">${usersList.map(u => `<option value="${u.id}" ${u.id == selectedId ? "selected" : ""}>${u.first_name} ${u.last_name}</option>`).join('')}</select>`;
    }

    async function getJiraCounts(engagementId) {
        const tests = await fetchTests(engagementId);
        const total = tests.length;
        const security = tests.filter(t => t.commit_hash === "Security").length;
        const functional = tests.filter(t => t.commit_hash === "Functional").length;
        return { total, security, functional };
    }

    async function renderTableOpen(page) {
        const tableBody = document.getElementById("openTasksTable");
        tableBody.innerHTML = "";
        const start = (page - 1) * ROWS_PER_PAGE;
        const end = start + ROWS_PER_PAGE;
        const paginatedTasks = openTasks.slice(start, end);

        for (const t of paginatedTasks) {
            const jiraCounts = await getJiraCounts(t.id);
            const row = document.createElement("tr");
            row.dataset.id = t.id;
            row.innerHTML = `
                <td>${t.id}</td>
                <td>${t.created.split("T")[0]}</td>
                <td>${calculateAgingOpen(t.created)}</td>
                <td>${t.name}</td>
                <td>${jiraCounts.total} | ${jiraCounts.security} | ${jiraCounts.functional}</td>
                <td>${createAssignedToDropdown(t.lead)}</td>
                <td>${createStatusDropdown(t.status)}</td>
                <td>${createStatusDropdown(t.branch_tag || 'Not Started')}</td>
                <td>${createStatusDropdown(t.commit_hash || 'Not Started')}</td>
                <td>${t.target_start?.split("T")[0] || 'N/A'}</td>
                <td>${t.target_end?.split("T")[0] || 'N/A'}</td>
                <td>${t.build_id || 'N/A'}</td>
                <td>${t.reason || 'N/A'}</td>
                <td>${createProductDropdown(t.product)}</td>
                <td>${t.version || 'N/A'}</td>
                <td>
                    <button class="btn btn-danger btn-sm" onclick="closeTask(${t.id}, '${t.name}')">Close</button>
                    <button class="btn btn-primary btn-sm" onclick="showEditModal(${t.id})">Edit</button>
                </td>
            `;
            tableBody.appendChild(row);

            const statusAnalyst = row.querySelector("td:nth-child(7) select");
            const statusMentor = row.querySelector("td:nth-child(8) select");
            const statusLead = row.querySelector("td:nth-child(9) select");
            const assignedTo = row.querySelector("td:nth-child(6) select");
            const product = row.querySelector("td:nth-child(14) select");
            [statusAnalyst, statusMentor, statusLead, assignedTo, product].forEach(el => {
                el.addEventListener("change", () => updateTask(t.id, t.name, row));
                el.addEventListener("blur", () => showAlert("Saved", "success"));
            });
        }
        renderPagination('open');
    }

    async function renderTableClosed(page) {
        const tableBody = document.getElementById("closedTasksTable");
        tableBody.innerHTML = "";
        const start = (page - 1) * ROWS_PER_PAGE;
        const end = start + ROWS_PER_PAGE;
        const paginatedTasks = closedTasks.slice(start, end);

        for (const t of paginatedTasks) {
            const jiraCounts = await getJiraCounts(t.id);
            const row = document.createElement("tr");
            row.dataset.id = t.id;
            row.innerHTML = `
                <td>${t.id}</td>
                <td>${t.created.split("T")[0]}</td>
                <td>${calculateAgingClosed(t.created, t.updated)}</td>
                <td>${t.name}</td>
                <td>${jiraCounts.total} | ${jiraCounts.security} | ${jiraCounts.functional}</td>
                <td>${getAssignedToName(t.lead)}</td>
                <td>${t.status}</td>
                <td>${t.branch_tag || 'N/A'}</td>
                <td>${t.commit_hash || 'N/A'}</td>
                <td>${t.target_start?.split("T")[0] || 'N/A'}</td>
                <td>${t.target_end?.split("T")[0] || 'N/A'}</td>
                <td>${t.build_id || 'N/A'}</td>
                <td>${t.reason || 'N/A'}</td>
                <td>${getProductName(t.product)}</td>
                <td>${t.version || 'N/A'}</td>
                <td>
                    <button class="btn btn-success btn-sm" onclick="reopenTask(${t.id}, '${t.name}')">Reopen</button>
                    <button class="btn btn-primary btn-sm" onclick="showEditModal(${t.id})">Edit</button>
                </td>
            `;
            tableBody.appendChild(row);
        }
        renderPagination('closed');
    }

    function renderPagination(tab) {
        const totalItems = tab === 'open' ? openTasks : tab === 'closed' ? closedTasks : testsList;
        const totalPages = Math.ceil(totalItems.length / ROWS_PER_PAGE);
        const pagination = document.getElementById(`${tab}Pagination`);
        pagination.innerHTML = "";

        const firstItem = document.createElement("div");
        firstItem.className = `page-item ${tab === 'open' && currentPageOpen === 1 || tab === 'closed' && currentPageClosed === 1 || tab === 'tests' && currentPageTests === 1 ? 'active' : ''}`;
        firstItem.textContent = "First";
        firstItem.onclick = () => { 
            if (tab === 'open') { currentPageOpen = 1; renderTableOpen(1); } 
            else if (tab === 'closed') { currentPageClosed = 1; renderTableClosed(1); }
            else { currentPageTests = 1; renderTestsTable(1); }
        };
        pagination.appendChild(firstItem);

        const prevItem = document.createElement("div");
        prevItem.className = "page-item";
        prevItem.textContent = "Previous";
        prevItem.onclick = () => { 
            if (tab === 'open' && currentPageOpen > 1) { currentPageOpen--; renderTableOpen(currentPageOpen); } 
            else if (tab === 'closed' && currentPageClosed > 1) { currentPageClosed--; renderTableClosed(currentPageClosed); }
            else if (tab === 'tests' && currentPageTests > 1) { currentPageTests--; renderTestsTable(currentPageTests); }
        };
        pagination.appendChild(prevItem);

        const nextItem = document.createElement("div");
        nextItem.className = "page-item";
        nextItem.textContent = "Next";
        nextItem.onclick = () => { 
            if (tab === 'open' && currentPageOpen < totalPages) { currentPageOpen++; renderTableOpen(currentPageOpen); } 
            else if (tab === 'closed' && currentPageClosed < totalPages) { currentPageClosed++; renderTableClosed(currentPageClosed); }
            else if (tab === 'tests' && currentPageTests < totalPages) { currentPageTests++; renderTestsTable(currentPageTests); }
        };
        pagination.appendChild(nextItem);

        const lastItem = document.createElement("div");
        lastItem.className = `page-item ${tab === 'open' && currentPageOpen === totalPages || tab === 'closed' && currentPageClosed === totalPages || tab === 'tests' && currentPageTests === totalPages ? 'active' : ''}`;
        lastItem.textContent = "Last";
        lastItem.onclick = () => { 
            if (tab === 'open') { currentPageOpen = totalPages; renderTableOpen(totalPages); } 
            else if (tab === 'closed') { currentPageClosed = totalPages; renderTableClosed(totalPages); }
            else { currentPageTests = totalPages; renderTestsTable(totalPages); }
        };
        pagination.appendChild(lastItem);
    }

    async function updateTask(id, name, row) {
        const statusAnalyst = row.querySelector("td:nth-child(7) select").value;
        const statusMentor = row.querySelector("td:nth-child(8) select").value;
        const statusLead = row.querySelector("td:nth-child(9) select").value;
        const assignedTo = row.querySelector("td:nth-child(6) select").value;
        const product = row.querySelector("td:nth-child(14) select").value;

        const taskIndex = allTasks.findIndex(t => t.id === id);
        if (taskIndex === -1) return;

        const updatedTask = {
            ...allTasks[taskIndex],
            status: statusAnalyst,
            branch_tag: statusMentor,
            commit_hash: statusLead,
            lead: assignedTo,
            product: product,
        };

        try {
            const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                method: "PUT",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(updatedTask),
                credentials: "include"
            });
            if (response.ok) {
                allTasks[taskIndex] = updatedTask;
                const openTaskIndex = openTasks.findIndex(t => t.id === id);
                if (openTaskIndex !== -1) openTasks[openTaskIndex] = updatedTask;
            } else {
                showAlert("Failed to update task!", "danger");
            }
        } catch (error) {
            console.error("Error updating task:", error);
            showAlert("Error updating task!", "danger");
        }
    }

    async function closeTask(id, name) {
        try {
            const response = await fetch(`${BASE_URL}/engagements/${id}/close/`, {
                method: "POST",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                credentials: "include"
            });
            if (response.ok) {
                showAlert(`${name} closed successfully`, "success");
                fetchEngagements();
            } else {
                showAlert("Failed to close task!", "danger");
            }
        } catch (error) {
            console.error("Error closing task:", error);
            showAlert("Error closing task!", "danger");
        }
    }

    async function reopenTask(id, name) {
        try {
            const response = await fetch(`${BASE_URL}/engagements/${id}/reopen/`, {
                method: "POST",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                credentials: "include"
            });
            if (response.ok) {
                showAlert(`${name} reopened successfully`, "success");
                fetchEngagements();
            } else {
                showAlert("Failed to reopen task!", "danger");
            }
        } catch (error) {
            console.error("Error reopening task:", error);
            showAlert("Error reopening task!", "danger");
        }
    }

    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        const overlay = document.getElementById("modalOverlay");
        modal.style.display = "block";
        overlay.style.display = "block";
        modalStack.push(modalId);
        modal.style.zIndex = modal.dataset.zIndex;
    }

    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modalStack.length > 1 && modalStack[modalStack.length - 1] !== modalId) {
            showAlert("Please close the top modal first!", "danger");
            return;
        }
        modal.style.display = "none";
        modalStack.pop();
        if (modalStack.length === 0) {
            document.getElementById("modalOverlay").style.display = "none";
        }
    }

    function showAddTaskModal() {
        document.getElementById("addTaskName").value = "";
        document.getElementById("addTaskReason").value = "";
        showModal("addTaskModal");
    }

    async function addTask() {
        const name = document.getElementById("addTaskName").value.trim();
        const reason = document.getElementById("addTaskReason").value.trim();
        if (!name || !reason) {
            showAlert("Name and Created by are required!", "danger");
            return;
        }

        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        const createdDate = today.toISOString().split("T")[0];
        const tomorrowDate = tomorrow.toISOString().split("T")[0];

        const payload = {
            name,
            tags: ["pci"],
            target_start: tomorrowDate,
            target_end: tomorrowDate,
            reason,
            status: "Not Started",
            engagement_type: "Interactive",
            commit_hash: "Not Started",
            branch_tag: "Not Started",
            lead: 2,
            product: 3,
            active: true,
            created: createdDate,
        };

        try {
            const response = await fetch(`${BASE_URL}/engagements/`, {
                method: "POST",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(payload),
                credentials: "include"
            });
            if (response.ok) {
                showAlert("Task added successfully!", "success");
                closeModal("addTaskModal");
                fetchEngagements();
                showAddTaskModal();
            } else {
                showAlert("Failed to add task!", "danger");
            }
        } catch (error) {
            console.error("Error adding task:", error);
            showAlert("Error adding task!", "danger");
        }
    }

    function showEditModal(id) {
        const task = allTasks.find(t => t.id === id);
        currentEngagementId = id;
        document.getElementById("editTaskHeader").innerHTML = `
            <span>ID: ${task.id}</span>
            <span>Created: ${task.created.split("T")[0]}</span>
            <span>Aging: ${activeTab === 'open' ? calculateAgingOpen(task.created) : calculateAgingClosed(task.created, task.updated)} Days</span>
            <span><strong>${task.name}</strong></span>
            <span>Created by: ${task.reason || 'N/A'}</span>
            <span>Product: ${getProductName(task.product)}</span>
        `;
        document.getElementById("editKickOffDate").value = task.build_id || '';
        document.getElementById("editAppSecETA").value = task.target_start?.split("T")[0] || '';
        document.getElementById("editRmETA").value = task.target_end?.split("T")[0] || '';
        document.getElementById("editAssignedTo").innerHTML = usersList.map(u => 
            `<option value="${u.id}" ${u.id == task.lead ? 'selected' : ''}>${u.first_name} ${u.last_name}</option>`
        ).join('');
        document.getElementById("editStatusAnalyst").value = task.status || 'Not Started';
        document.getElementById("editStatusMentor").value = task.branch_tag || 'Not Started';
        document.getElementById("editStatusLead").value = task.commit_hash || 'Not Started';
        document.getElementById("editIR").value = task.version || '';
        document.getElementById("editComments").value = task.description || '';

        const inputs = ['editKickOffDate', 'editAppSecETA', 'editRmETA', 'editAssignedTo', 
                       'editStatusAnalyst', 'editStatusMentor', 'editStatusLead', 'editIR', 'editComments'];
        inputs.forEach(inputId => {
            const element = document.getElementById(inputId);
            element.onchange = () => updateTaskFromModal(id, task.name);
            element.onblur = () => showAlert("Saved", "success");
        });

        showModal("editModal");
    }

    async function updateTaskFromModal(id, name) {
        const taskIndex = allTasks.findIndex(t => t.id === id);
        if (taskIndex === -1) return;

        const updatedTask = {
            ...allTasks[taskIndex],
            build_id: document.getElementById("editKickOffDate").value,
            target_start: document.getElementById("editAppSecETA").value,
            target_end: document.getElementById("editRmETA").value,
            lead: document.getElementById("editAssignedTo").value,
            status: document.getElementById("editStatusAnalyst").value,
            branch_tag: document.getElementById("editStatusMentor").value,
            commit_hash: document.getElementById("editStatusLead").value,
            version: document.getElementById("editIR").value,
            description: document.getElementById("editComments").value,
        };

        try {
            const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                method: "PUT",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(updatedTask),
                credentials: "include"
            });
            if (response.ok) {
                allTasks[taskIndex] = updatedTask;
                const openTaskIndex = openTasks.findIndex(t => t.id === id);
                if (openTaskIndex !== -1) openTasks[openTaskIndex] = updatedTask;
            } else {
                showAlert("Failed to update task!", "danger");
            }
        } catch (error) {
            console.error("Error updating task:", error);
            showAlert("Error updating task!", "danger");
        }
    }

    function showReassignmentModal() {
        const reassignTasks = document.getElementById("reassignTasks");
        reassignTasks.innerHTML = openTasks.map(t => 
            `<option value="${t.id}">${t.name}</option>`
        ).join('');
        document.getElementById("reassignTo").innerHTML = usersList.map(u => 
            `<option value="${u.id}">${u.first_name} ${u.last_name}</option>`
        ).join('');
        showModal("reassignmentModal");
    }

    async function reassignTasks() {
        const taskIds = Array.from(document.getElementById("reassignTasks").selectedOptions).map(opt => opt.value);
        const newLead = document.getElementById("reassignTo").value;

        try {
            for (const id of taskIds) {
                const taskIndex = allTasks.findIndex(t => t.id == id);
                if (taskIndex === -1) continue;
                const updatedTask = { ...allTasks[taskIndex], lead: newLead };
                const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                    body: JSON.stringify(updatedTask),
                    credentials: "include"
                });
                if (response.ok) {
                    allTasks[taskIndex] = updatedTask;
                    const openTaskIndex = openTasks.findIndex(t => t.id == id);
                    if (openTaskIndex !== -1) openTasks[openTaskIndex] = updatedTask;
                }
            }
            showAlert("Tasks reassigned successfully!", "success");
            closeModal("reassignmentModal");
        } catch (error) {
            console.error("Error reassigning tasks:", error);
            showAlert("Error reassigning tasks!", "danger");
        }
    }

    function showBulkUpdateModal() {
        const bulkTasks = document.getElementById("bulkTasks");
        bulkTasks.innerHTML = openTasks.map(t => 
            `<option value="${t.id}">${t.name}</option>`
        ).join('');
        showModal("bulkUpdateModal");
    }

    async function bulkUpdateTasks() {
        const taskIds = Array.from(document.getElementById("bulkTasks").selectedOptions).map(opt => opt.value);
        const statusAnalyst = document.getElementById("bulkStatusAnalyst").value;
        const statusMentor = document.getElementById("bulkStatusMentor").value;
        const statusLead = document.getElementById("bulkStatusLead").value;

        try {
            for (const id of taskIds) {
                const taskIndex = allTasks.findIndex(t => t.id == id);
                if (taskIndex === -1) continue;
                const updatedTask = {
                    ...allTasks[taskIndex],
                    ...(statusAnalyst && { status: statusAnalyst }),
                    ...(statusMentor && { branch_tag: statusMentor }),
                    ...(statusLead && { commit_hash: statusLead }),
                };
                const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                    body: JSON.stringify(updatedTask),
                    credentials: "include"
                });
                if (response.ok) {
                    allTasks[taskIndex] = updatedTask;
                    const openTaskIndex = openTasks.findIndex(t => t.id == id);
                    if (openTaskIndex !== -1) openTasks[openTaskIndex] = updatedTask;
                }
            }
            showAlert("Tasks updated successfully!", "success");
            closeModal("bulkUpdateModal");
        } catch (error) {
            console.error("Error updating tasks:", error);
            showAlert("Error updating tasks!", "danger");
        }
    }

    async function showTestsModal() {
        if (!currentEngagementId) return;
        await fetchTests(currentEngagementId);
        document.getElementById("testsTotal").textContent = `Total Tests: ${testsList.length}`;
        renderTestsTable(1);
        showModal("testsModal");
    }

    function clearTestFilters() {
        document.getElementById("testAssignedToFilter").value = "";
        document.getElementById("testTitleSearch").value = "";
        document.getElementById("testTypeFilter").value = "";
        renderTestsTable(1);
    }

    function createTestAssignedToDropdown(selectedId) {
        const uniqueLeads = [...new Set(testsList.map(t => t.lead).filter(id => id !== null && id !== undefined))];
        const options = uniqueLeads.map(id => {
            const user = usersList.find(u => u.id === id);
            return `<option value="${id}" ${id === selectedId ? "selected" : ""}>${user ? `${user.first_name} ${user.last_name}` : 'Unassigned'}</option>`;
        });
        return `<select class="form-select">${options.join('')}</select>`;
    }

    async function renderTestsTable(page) {
        const tableBody = document.getElementById("testsTable");
        tableBody.innerHTML = "";
        const assignedToFilter = document.getElementById("testAssignedToFilter").value;
        const titleSearch = document.getElementById("testTitleSearch").value.toLowerCase().trim();
        const typeFilter = document.getElementById("testTypeFilter").value;

        const filteredTests = testsList.filter(t => {
            const title = t.title.toLowerCase();
            return (!assignedToFilter || t.lead == assignedToFilter) &&
                   (!titleSearch || title.includes(titleSearch)) &&
                   (!typeFilter || t.commit_hash === typeFilter);
        });

        const start = (page - 1) * ROWS_PER_PAGE;
        const end = start + ROWS_PER_PAGE;
        const paginatedTests = filteredTests.slice(start, end);

        document.getElementById("testAssignedToFilter").innerHTML = '<option value="">Filter by Assigned To</option>' + 
            [...new Set(testsList.map(t => t.lead).filter(id => id !== null && id !== undefined))].map(id => {
                const user = usersList.find(u => u.id === id);
                return `<option value="${id}">${user ? `${user.first_name} ${user.last_name}` : 'Unassigned'}</option>`;
            }).join('');

        document.getElementById("testTypeFilter").innerHTML = '<option value="">Filter by Type</option>' + 
            [...new Set(testsList.map(t => t.commit_hash).filter(t => t))].map(type => `<option value="${type}">${type}</option>`).join('');

        paginatedTests.forEach(t => {
            const row = document.createElement("tr");
            row.dataset.id = t.id;
            row.innerHTML = `
                <td>${t.id}</td>
                <td>${t.title}</td>
                <td>${t.commit_hash || 'N/A'}</td>
                <td>${createTestAssignedToDropdown(t.lead)}</td>
                <td>${createStatusDropdown(t.branch_tag || 'Not Started')}</td>
                <td><textarea class="description" data-id="${t.id}">${t.description || ''}</textarea></td>
            `;
            tableBody.appendChild(row);

            const description = row.querySelector(".description");
            const assignedTo = row.querySelector("td:nth-child(4) select");
            const status = row.querySelector("td:nth-child(5) select");
            [description, assignedTo, status].forEach(el => {
                el.addEventListener("change", () => updateTest(t.id));
                el.addEventListener("blur", () => showAlert("Saved", "success"));
            });
        });
        renderPagination('tests');
    }

    async function updateTest(id) {
        const row = document.querySelector(`#testsTable tr[data-id="${id}"]`);
        if (!row) return;
        const description = row.querySelector(".description").value;
        const lead = row.querySelector("td:nth-child(4) select").value;
        const branchTag = row.querySelector("td:nth-child(5) select").value;

        const testIndex = testsList.findIndex(t => t.id === id);
        if (testIndex === -1) return;

        const updatedTest = {
            ...testsList[testIndex],
            description,
            lead,
            branch_tag: branchTag,
        };

        try {
            const response = await fetch(`${BASE_URL}/tests/${id}/`, {
                method: "PUT",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(updatedTest),
                credentials: "include"
            });
            if (response.ok) {
                testsList[testIndex] = updatedTest;
            } else {
                showAlert("Failed to update test!", "danger");
            }
        } catch (error) {
            console.error("Error updating test:", error);
            showAlert("Error updating test!", "danger");
        }
    }

    (async () => {
        await fetchCSRF();
        await fetchUsers();
        await fetchProducts();
        await fetchEngagements();
    })();
</script>