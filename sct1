Added <button class="btn btn-secondary btn-sm" onclick="showEditDescriptionModal(${engagement.id}, '${engagement.description || ''}')">Edit</button>







<!-- Description Edit Modal -->
<div id="editDescriptionModal" class="modal">
    <h2>Edit Description</h2>
    <div class="mb-2">
        <label for="engagementDescription" style="display: block; margin-bottom: 5px;">Description:</label>
        <textarea id="engagementDescription" class="form-control" rows="5" placeholder="Enter description..."></textarea>
    </div>
    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" onclick="closeEditDescriptionModal()">Close</button>
    </div>
</div>






let currentEditingEngagementId = null;

function showEditDescriptionModal(engagementId, description) {
    currentEditingEngagementId = engagementId;
    const modal = document.getElementById("editDescriptionModal");
    const overlay = document.getElementById("modalOverlay");
    const descriptionTextarea = document.getElementById("engagementDescription");

    descriptionTextarea.value = description || '';
    modal.style.display = "block";
    overlay.style.display = "block";

    // Autosave on input
    descriptionTextarea.addEventListener("input", debounce(() => {
        saveDescription(engagementId, descriptionTextarea.value);
    }, 500));
}

function closeEditDescriptionModal() {
    const modal = document.getElementById("editDescriptionModal");
    const overlay = document.getElementById("modalOverlay");
    modal.style.display = "none";
    overlay.style.display = "none";
    currentEditingEngagementId = null;
}

async function saveDescription(engagementId, description) {
    try {
        const engagement = openEngagements.find(eng => eng.id === engagementId);
        if (!engagement) {
            showAlert("Engagement not found!", "danger");
            return;
        }

        const payload = {
            id: engagementId,
            name: engagement.name,
            target_start: engagement.target_start,
            target_end: engagement.target_end,
            product: engagement.product,
            lead: engagement.lead,
            status: engagement.status,
            commit_hash: engagement.commit_hash,
            build_id: engagement.build_id,
            version: engagement.version,
            active: engagement.active,
            description: description // Update description
        };

        const response = await fetch(`${BASE_URL}/engagements/${engagementId}/`, {
            method: "PUT",
            headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
            body: JSON.stringify(payload),
            credentials: "include"
        });

        if (response.ok) {
            engagement.description = description; // Update local data
            showAlert("Description saved successfully", "success", engagement.name);
            fetchEngagements(); // Refresh engagements
        } else {
            showAlert("Failed to save description!", "danger");
        }
    } catch (error) {
        showAlert("Error saving description!", "danger");
        console.error("Error:", error);
    }
}

// Debounce function to limit API calls during typing
function debounce(func, wait) {
    let timeout;
    return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

