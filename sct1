async function createEngagements() {
    const namesInput = document.getElementById("engagementNames").value.trim();
    if (!namesInput) {
        showAlert("Please enter at least one engagement name!", "danger");
        return;
    }

    const names = namesInput.split(',').map(name => name.trim()).filter(name => name);
    const today = new Date().toISOString().split('T')[0];
    const created = [];
    const skipped = [];
    const errors = [];

    // Check existing engagements
    const existingNames = new Set(allEngagements.map(eng => eng.name.toLowerCase()));

    for (const name of names) {
        if (existingNames.has(name.toLowerCase())) {
            skipped.push(name);
            continue;
        }

        const engagementPayload = {
            name: name,
            target_start: today,
            target_end: today,
            lead: 2, // Default lead for engagement
            status: "Not Started",
            tags: ["crm"],
            product: 3,
            active: true
        };

        try {
            // Step 1: Create the engagement
            const engagementResponse = await fetch(`${BASE_URL}/engagements/`, {
                method: "POST",
                headers: { 
                    "Content-Type": "application/json", 
                    "X-CSRFToken": csrfToken 
                },
                body: JSON.stringify(engagementPayload),
                credentials: "include"
            });

            if (engagementResponse.ok) {
                const engagementData = await engagementResponse.json();
                created.push({ id: engagementData.id, name: engagementData.name });
                existingNames.add(name.toLowerCase()); // Add to prevent duplicates in this batch

                // Step 2: Create tests for the engagement
                const testTitles = ["sql", "css", "bhj"];
                for (const title of testTitles) {
                    const testPayload = {
                        title: title,
                        tags: ["risk_register"],
                        scan_type: "risk_register",
                        target_start: today,
                        target_end: today,
                        commit_hash: "NA",
                        branch_tag: "NA",
                        lead: engagementData.lead, // Fetch lead from the created engagement
                        test_type: 206,
                        environment: 10,
                        engagement: engagementData.id // Link to the newly created engagement
                    };

                    try {
                        const testResponse = await fetch(`${BASE_URL}/tests/`, {
                            method: "POST",
                            headers: { 
                                "Content-Type": "application/json", 
                                "X-CSRFToken": csrfToken 
                            },
                            body: JSON.stringify(testPayload),
                            credentials: "include"
                        });

                        if (!testResponse.ok) {
                            console.error(`Failed to create test '${title}' for engagement ${name}`);
                            // Optionally add to errors if you want to track test creation failures separately
                        }
                    } catch (testError) {
                        console.error(`Error creating test '${title}' for engagement ${name}:`, testError);
                    }
                }
            } else {
                errors.push(name);
            }
        } catch (error) {
            console.error(`Error creating engagement ${name}:`, error);
            errors.push(name);
        }
    }

    // Render summary
    const createdTableBody = document.getElementById("createdTableBody");
    const skippedTableBody = document.getElementById("skippedTableBody");
    const errorTableBody = document.getElementById("errorTableBody");

    createdTableBody.innerHTML = created.map(item => `
        <tr>
            <td>${item.id}</td>
            <td>${item.name}</td>
        </tr>
    `).join('') || '<tr><td colspan="2">None</td></tr>';

    skippedTableBody.innerHTML = skipped.map(name => `
        <tr>
            <td>${name}</td>
        </tr>
    `).join('') || '<tr><td>None</td></tr>';

    errorTableBody.innerHTML = errors.map(name => `
        <tr>
            <td>${name}</td>
        </tr>
    `).join('') || '<tr><td>None</td></tr>';

    document.getElementById("createSummary").style.display = 'block';

    if (created.length > 0) {
        fetchEngagements(); // Refresh the main table
        showAlert(`${created.length} engagement(s) created successfully with tests!`, "success");
    }
    if (errors.length > 0) {
        showAlert(`${errors.length} engagement(s) failed to create!`, "danger");
    }
}