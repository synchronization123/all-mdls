<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DefectDojo Performance Trends</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .chart-container {
            width: 100%;
            max-width: 600px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2 class="text-center">DefectDojo API Response Time Trends</h2>
        <div class="row">
            <div class="col-md-6 chart-container">
                <h5 class="text-center">Findings API</h5>
                <canvas id="chart-findings"></canvas>
            </div>
            <div class="col-md-6 chart-container">
                <h5 class="text-center">Products API</h5>
                <canvas id="chart-products"></canvas>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6 chart-container">
                <h5 class="text-center">Engagements API</h5>
                <canvas id="chart-engagements"></canvas>
            </div>
            <div class="col-md-6 chart-container">
                <h5 class="text-center">Tests API</h5>
                <canvas id="chart-tests"></canvas>
            </div>
        </div>
    </div>

    <script>
        const endpoints = [
            { name: "Findings", url: "https://demo.defectdojo.org/api/v2/findings/", chartId: "chart-findings" },
            { name: "Products", url: "https://demo.defectdojo.org/api/v2/products/", chartId: "chart-products" },
            { name: "Engagements", url: "https://demo.defectdojo.org/api/v2/engagements/", chartId: "chart-engagements" },
            { name: "Tests", url: "https://demo.defectdojo.org/api/v2/tests/", chartId: "chart-tests" }
        ];

        let charts = {}; // Store chart instances
        let dataPoints = {}; // Store last 20 response times

        function createChart(chartId) {
            const ctx = document.getElementById(chartId).getContext("2d");
            return new Chart(ctx, {
                type: "line",
                data: {
                    labels: Array(20).fill(""),
                    datasets: [{
                        label: "Response Time (ms)",
                        data: Array(20).fill(null),
                        borderColor: "#007bff",
                        borderWidth: 2,
                        fill: false,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    animation: false,
                    scales: {
                        x: { display: false },
                        y: { beginAtZero: true, suggestedMax: 2000 }
                    }
                }
            });
        }

        async function fetchPerformance() {
            for (const endpoint of endpoints) {
                const start = performance.now();
                try {
                    const response = await fetch(endpoint.url);
                    if (!response.ok) throw new Error("Error fetching data");
                } catch (error) {
                    console.error(`Error fetching ${endpoint.name}:`, error);
                }
                const duration = performance.now() - start;
                updateChart(endpoint.chartId, duration);
            }
        }

        function updateChart(chartId, time) {
            const chart = charts[chartId];
            if (!chart) return;

            let dataset = chart.data.datasets[0];
            dataset.data.push(time);
            if (dataset.data.length > 20) dataset.data.shift();

            chart.data.labels.push("");
            if (chart.data.labels.length > 20) chart.data.labels.shift();

            chart.update();
        }

        function startMonitoring() {
            // Create charts
            endpoints.forEach(endpoint => {
                charts[endpoint.chartId] = createChart(endpoint.chartId);
                dataPoints[endpoint.chartId] = [];
            });

            // Fetch performance data every 3 seconds
            fetchPerformance();
            setInterval(fetchPerformance, 3000);
        }

        // Start monitoring on page load
        startMonitoring();
    </script>
</body>
</html>