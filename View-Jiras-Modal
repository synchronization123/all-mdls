<div class="modal fade" id="viewJirasModal" tabindex="-1" aria-labelledby="viewJirasModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header" style="background-color: #343a40; color: #fff;">
        <h5 class="modal-title" id="viewJirasModalLabel">View Jiras</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row mb-3">
          <div class="col-md-4">
            <select class="form-select searchable-select" id="engagementSelect">
              <option value="">Select a Patch</option>
            </select>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col-md-3">
            <input type="text" class="form-control" id="jiraTitleSearch" placeholder="Search Jira...">
          </div>
          <div class="col-md-2">
            <select class="form-select" id="jiraTypeFilter">
              <option value="">All Jira Types</option>
              <option value="Security">Security</option>
              <option value="Functional">Functional</option>
            </select>
          </div>
          <div class="col-md-2">
            <select class="form-select" id="analysisStatusFilter">
              <option value="">All Analysis Status</option>
              <option value="Not Started">Not Started</option>
              <option value="In Progress">In Progress</option>
              <option value="On Hold">On Hold</option>
              <option value="Completed">Completed</option>
            </select>
          </div>
          <div class="col-md-2">
            <select class="form-select" id="jiraStatusFilter">
              <option value="">All Jira Status</option>
              <option value="To Do">To Do</option>
              <option value="In Progress">In Progress</option>
              <option value="Ready for Testing">Ready for Testing</option>
              <option value="Done">Done</option>
            </select>
          </div>
          <div class="col-md-3">
            <select class="form-select searchable-select" id="assignedToFilterJira">
              <option value="">All Assigned To</option>
            </select>
          </div>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-3">
          <div>
            <button class="btn btn-sm btn-outline-primary" id="jiraFirstPage"><i class="bi bi-skip-start-fill"></i> First</button>
            <button class="btn btn-sm btn-outline-secondary" id="jiraPrevPage"><i class="bi bi-caret-left-fill"></i> Prev</button>
            <button class="btn btn-sm btn-outline-secondary" id="jiraNextPage">Next <i class="bi bi-caret-right-fill"></i></button>
            <button class="btn btn-sm btn-outline-primary" id="jiraLastPage">Last <i class="bi bi-skip-end-fill"></i></button>
          </div>
          <div id="jiraPaginationStatus" class="text-muted small"></div>
        </div>
        <div class="table-container">
          <table class="table table-hover table-bordered align-middle">
            <thead>
              <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Jira Type</th>
                <th>Analysis Status</th>
                <th>Jira Status</th>
                <th>Assigned To</th>
                <th>Action</th> <!-- New column for Save button -->
              </tr>
            </thead>
            <tbody id="jiraTableBody"></tbody>
          </table>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>










<script>
  // ... (previous code unchanged up to fetchJiraTests) ...

  async function saveJiraTest(testId, field, value) {
    try {
      const payload = {};
      if (field === 'lead') {
        payload[field] = value ? parseInt(value) : null; // Convert to integer or null for API
      } else {
        payload[field] = value;
      }
      const response = await fetch(`https://demo.defectdojo.org/api/v2/tests/${testId}/`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': document.getElementById('csrfToken').value
        },
        body: JSON.stringify(payload)
      });
      if (response.ok) {
        const updatedTest = await response.json();
        const index = jiraTests.findIndex(t => t.id === testId);
        if (index !== -1) {
          jiraTests[index] = { ...jiraTests[index], ...updatedTest };
          jiraTests[index].lead = updatedTest.lead ? String(updatedTest.lead) : ''; // Ensure string for UI
          jiraTests[index].lead_name = updatedTest.lead && usersCache[updatedTest.lead] ? usersCache[updatedTest.lead].name : 'Unassigned';
          filteredJiraTests = [...jiraTests];
          applyJiraFilters(); // Re-render with updated data
          showToast('Jira test updated successfully', 'success');
        }
      } else {
        const errorData = await response.json();
        showToast(`Failed to update Jira test: ${errorData.message || 'Unknown error'}`, 'error');
      }
    } catch (error) {
      console.error('Error saving Jira test:', error);
      showToast('Error saving Jira test', 'error');
    }
  }

  function renderJiraTable() {
    const start = (jiraCurrentPage - 1) * jiraPageSize;
    const pagedData = filteredJiraTests.slice(start, start + jiraPageSize);
    const totalPages = Math.ceil(filteredJiraTests.length / jiraPageSize);

    const jiraTableBody = document.getElementById('jiraTableBody');
    jiraTableBody.innerHTML = pagedData.map(t => `
      <tr>
        <td>${t.id}</td>
        <td>${t.title}</td>
        <td><textarea class="form-control" data-id="${t.id}" data-field="description">${t.description || ''}</textarea></td>
        <td>
          <select class="form-select" data-id="${t.id}" data-field="build_id">
            <option value="Security" ${t.build_id === 'Security' ? 'selected' : ''}>Security</option>
            <option value="Functional" ${t.build_id === 'Functional' ? 'selected' : ''}>Functional</option>
          </select>
        </td>
        <td>
          <select class="form-select" data-id="${t.id}" data-field="commit_hash">
            <option value="Not Started" ${t.commit_hash === 'Not Started' ? 'selected' : ''}>Not Started</option>
            <option value="In Progress" ${t.commit_hash === 'In Progress' ? 'selected' : ''}>In Progress</option>
            <option value="On Hold" ${t.commit_hash === 'On Hold' ? 'selected' : ''}>On Hold</option>
            <option value="Completed" ${t.commit_hash === 'Completed' ? 'selected' : ''}>Completed</option>
          </select>
        </td>
        <td><input type="text" class="form-control" data-id="${t.id}" data-field="branch_tag" value="${t.branch_tag || ''}"></td>
        <td>
          <select class="form-select searchable-select" data-id="${t.id}" data-field="lead">
            <option value="" ${!t.lead ? 'selected' : ''}>Unassigned</option>
            ${Object.values(usersCache).map(user => `
              <option value="${user.id}" ${t.lead === String(user.id) ? 'selected' : ''}>${user.name}</option>
            `).join('')}
          </select>
        </td>
        <td>
          <button class="btn btn-sm btn-primary save-jira-btn" data-id="${t.id}" title="Save"><i class="bi bi-save"></i></button>
        </td>
      </tr>
    `).join('');

    document.getElementById('jiraPaginationStatus').textContent = `Page ${jiraCurrentPage} of ${totalPages} (${filteredJiraTests.length} results)`;
    document.getElementById("jiraPrevPage").disabled = jiraCurrentPage === 1;
    document.getElementById("jiraFirstPage").disabled = jiraCurrentPage === 1;
    document.getElementById("jiraNextPage").disabled = jiraCurrentPage === totalPages;
    document.getElementById("jiraLastPage").disabled = jiraCurrentPage === totalPages;

    // Destroy existing select2 instances
    $('#jiraTableBody .searchable-select').each(function() {
      if ($(this).hasClass('select2-hidden-accessible')) {
        $(this).select2('destroy');
      }
    });

    // Initialize select2
    $('#jiraTableBody .searchable-select').select2({
      theme: 'bootstrap-5',
      width: '100%',
      dropdownParent: $('#viewJirasModal'),
      placeholder: 'Unassigned',
      allowClear: true
    });

    // Add event listeners for Save buttons
    jiraTableBody.querySelectorAll('.save-jira-btn').forEach(button => {
      button.addEventListener('click', () => {
        const testId = parseInt(button.getAttribute('data-id'));
        const row = button.closest('tr');
        const leadSelect = row.querySelector(`select[data-field="lead"]`);
        const leadValue = leadSelect.value; // String value from select2
        saveJiraTest(testId, 'lead', leadValue);
      });
    });

    // Optional: Keep change event for other fields if desired
    jiraTableBody.querySelectorAll('textarea, select:not([data-field="lead"]), input').forEach(element => {
      element.addEventListener('change', (e) => {
        const testId = parseInt(e.target.getAttribute('data-id'));
        const field = e.target.getAttribute('data-field');
        const value = e.target.value;
        saveJiraTest(testId, field, value);
      });
    });
  }

  // ... (rest of the code unchanged) ...
</script>

